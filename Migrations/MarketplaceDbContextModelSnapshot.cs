// <auto-generated />
using System;
using Marketplace.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Marketplace.Migrations
{
    [DbContext(typeof(MarketplaceDbContext))]
    partial class MarketplaceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Marketplace.Models.AddressModel", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            AddressLine1 = "123 Đường Chính",
                            AddressLine2 = "123 Đường Chính",
                            City = "Hà Nội",
                            Country = "Việt Nam",
                            State = "on",
                            UserId = 1
                        },
                        new
                        {
                            AddressId = 2,
                            AddressLine1 = "456 Đường Láng",
                            AddressLine2 = "123 Đường Láng",
                            City = "TP.HCM",
                            Country = "Việt Nam",
                            State = "on",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Marketplace.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Marketplace.Models.CartItemModel", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem");

                    b.HasData(
                        new
                        {
                            CartItemId = 1,
                            CartId = 1,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            CartItemId = 2,
                            CartId = 1,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            CartItemId = 3,
                            CartId = 2,
                            ProductId = 3,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("Marketplace.Models.CartModel", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            CreatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 255, DateTimeKind.Local).AddTicks(114),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            CartId = 2,
                            CreatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 255, DateTimeKind.Local).AddTicks(115),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Marketplace.Models.CategoryModel", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Thời trang và quần áo"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Xe hơi và phương tiện"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Nông nghiệp và nông nghiệp"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Điện tử và công nghệ"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Đóng gói và in ấn"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Nhà cửa và nhà bếp"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Sản phẩm kỹ thuật số"
                        });
                });

            modelBuilder.Entity("Marketplace.Models.ImageModel", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ImageUrl = "/images/items/1.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 2,
                            ImageUrl = "/images/items/2.jpg",
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Marketplace.Models.ProductModel", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9989),
                            Description = "Mô tả sản phẩm 1",
                            ImageUrl = "/images/items/1.jpg",
                            Name = "Sản phẩm 1",
                            Price = 100f,
                            SellerId = 1,
                            UpdatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9990)
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9992),
                            Description = "Mô tả sản phẩm 2",
                            ImageUrl = "/images/items/2.jpg",
                            Name = "Sản phẩm 2",
                            Price = 200f,
                            SellerId = 2,
                            UpdatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9993)
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9994),
                            Description = "Mô tả sản phẩm 3",
                            ImageUrl = "/images/items/3.jpg",
                            Name = "Sản phẩm 3",
                            Price = 300f,
                            SellerId = 2,
                            UpdatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9995)
                        });
                });

            modelBuilder.Entity("Marketplace.Models.ReviewModel", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "Sản phẩm tuyệt vời!",
                            CreatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 255, DateTimeKind.Local).AddTicks(48),
                            ProductId = 1,
                            Rating = 5,
                            UserId = 2
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Sản phẩm tốt, nhưng có thể cải thiện hơn",
                            CreatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 255, DateTimeKind.Local).AddTicks(50),
                            ProductId = 2,
                            Rating = 4,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Marketplace.Models.TransactionModel", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TransactionId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Transaction");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            BuyerId = 2,
                            Price = 100f,
                            ProductId = 1,
                            Quantity = 1,
                            SellerId = 1,
                            TransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionId = 2,
                            BuyerId = 1,
                            Price = 200f,
                            ProductId = 2,
                            Quantity = 2,
                            SellerId = 2,
                            TransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Marketplace.Models.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9747),
                            Email = "huutinh@example.com",
                            FullName = "Nguyễn Hữu Tình",
                            ImageUrl = "/images/avatars/avatar1.jpg",
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            PhoneNumber = "0835133683",
                            UpdatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9761),
                            Username = "Nguyễn Hữu Tình"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9819),
                            Email = "kieudiem@example.com",
                            FullName = "Kiều Diễm",
                            ImageUrl = "/images/avatars/avatar2.jpg",
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            PhoneNumber = "0835133683",
                            UpdatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9819),
                            Username = "Kiều Diễm"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9940),
                            Email = "maihoa@example.com",
                            FullName = "Mai Hoa",
                            ImageUrl = "/images/avatars/avatar3.jpg",
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            PhoneNumber = "0835133683",
                            UpdatedAt = new DateTime(2023, 7, 22, 15, 55, 24, 254, DateTimeKind.Local).AddTicks(9941),
                            Username = "Mai Hoa"
                        });
                });

            modelBuilder.Entity("Marketplace.Models.AddressModel", b =>
                {
                    b.HasOne("Marketplace.Models.UserModel", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Marketplace.Models.CartItemModel", b =>
                {
                    b.HasOne("Marketplace.Models.CartModel", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Marketplace.Models.ProductModel", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Marketplace.Models.CartModel", b =>
                {
                    b.HasOne("Marketplace.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Marketplace.Models.ImageModel", b =>
                {
                    b.HasOne("Marketplace.Models.ProductModel", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Marketplace.Models.ProductModel", b =>
                {
                    b.HasOne("Marketplace.Models.Brand", "Brand")
                        .WithMany("CartItems")
                        .HasForeignKey("BrandId");

                    b.HasOne("Marketplace.Models.CategoryModel", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Marketplace.Models.ReviewModel", b =>
                {
                    b.HasOne("Marketplace.Models.ProductModel", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Marketplace.Models.UserModel", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Marketplace.Models.TransactionModel", b =>
                {
                    b.HasOne("Marketplace.Models.UserModel", "Buyer")
                        .WithMany("PurchasedItems")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Marketplace.Models.ProductModel", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Marketplace.Models.UserModel", "Seller")
                        .WithMany("SoldItems")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Marketplace.Models.Brand", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Marketplace.Models.CartModel", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Marketplace.Models.CategoryModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Marketplace.Models.ProductModel", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Marketplace.Models.UserModel", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("PurchasedItems");

                    b.Navigation("Reviews");

                    b.Navigation("SoldItems");
                });
#pragma warning restore 612, 618
        }
    }
}
